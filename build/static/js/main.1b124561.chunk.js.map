{"version":3,"sources":["stylesheets/App.module.css","images/background.png","interface.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","a","axios","get","response","console","log","oauth_token","data","url","window","location","assign","error","App","React","loggedIn","className","styles","LoginBox","style","marginBottom","fontSize","textDecoration","textUnderlineOffset","marginTop","AuthorizeButton","onClick","interfaceUtil","Page","HeaderBar","Background","src","bg","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wHACAA,EAAOC,QAAU,CAAC,gBAAkB,6BAA6B,WAAa,wBAAwB,SAAW,sBAAsB,KAAO,oB,4GCD/H,MAA0B,uC,uCC4IvC,IAca,EAjDD,WACV,sBAAC,8BAAAC,EAAA,+EAI0BC,IAAMC,IAAI,qBAJpC,OAISC,EAJT,OAKGC,QAAQC,IAAIF,GACNG,EAAeH,EAASI,KAAKC,IACnCJ,QAAQC,IAAIC,GACZG,OAAOC,SAASC,OAAhB,UAA0BL,IAR7B,kDAUGF,QAAQQ,MAAR,MAVH,yDAAD,I,OC5EWC,MAzBf,WACI,MAAgCC,YAAe,GAA/C,mBAAOC,EAAP,KACA,GADA,KACsCD,WAAe,SAArD,mBAGA,OAHA,UAII,sBAAKE,UAAWC,IAAOJ,IAAvB,WAESE,GAAY,sBAAKC,UAAaC,IAAOC,SAAzB,UACT,qBAAKC,MAAS,CAACC,aAAc,OAAQC,SAAU,OAAQC,eAAgB,YAAaC,oBAAqB,QAAzG,0BACA,qBAAKJ,MAAS,CAACC,aAAc,QAA7B,2DACA,qBAAKD,MAAS,CAACK,UAAU,QAAzB,SAAkC,sBAAMR,UAAaC,IAAOQ,gBAAiBC,QAAW,WAAOC,KAA7D,4BAItCZ,GAAY,qBAAKC,UAAaC,IAAOW,KAAzB,SACR,qBAAKZ,UAAaC,IAAOY,UAAzB,SAAoC,qDAI5C,qBAAKb,UAAaC,IAAOa,WAAYC,IAAOC,QCbzCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1b124561.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"AuthorizeButton\":\"App_AuthorizeButton__3zn1X\",\"Background\":\"App_Background__h2seP\",\"LoginBox\":\"App_LoginBox__1Hrvm\",\"Page\":\"App_Page__3XxL7\"};","export default __webpack_public_path__ + \"static/media/background.5c817abb.png\";","\r\nimport axios from 'axios'\r\n\r\n/*\r\nFunctions that interface between front and back end\r\n*/\r\n//BACKEND TODO:\r\n/*\r\n    Front end gives the backend a Json with username and password values, check if these values are in the account database\r\n    @parameters: \r\n        accountInfo - Json {email, password}\r\n    @returns: \r\n        boolean, true if the account exists, false otherwise\r\n    priority: high (as of 10/4)\r\n*/\r\nasync function checkValidAccount(accountInfo) {\r\n    let email_part = accountInfo.email;\r\n    let password_part = accountInfo.password;\r\n\r\n    try {\r\n        const response = await axios.get(`http://twitter-ease-api.herokuapp.com/validate/${email_part}/${password_part}`)\r\n        if(response.status == 200) {\r\n            return true\r\n        }\r\n        throw new Error(\"Request failed!\")\r\n    }\r\n    catch(error) {\r\n        return false\r\n    }\r\n}\r\n\r\n\r\n//returns an array of jsons filled with twitter accounts bound to the twitter ease account\r\n/*\r\n    @parameters:\r\n        accountInfo - Json {email, password}\r\n    @returns:\r\n        [{\r\n            twitterHandle,\r\n            twitterEmail,\r\n            twitterPassword,\r\n        },...]\r\n        *Whatever you think we need, honesly you can just return every piece of information to make it easier\r\n*/\r\nfunction retrieveTwitterAccounts(accountInfo){\r\n\r\n\r\n}\r\n\r\n/*\r\n    Backend must add the account information to the account database, you have to generate a UID for each user and also check that this email doesn't already exist\r\n    @parameters: \r\n        accountInfo - Json {email, password}\r\n    @returns: \r\n        boolean: true if backend successfully added an account, false if the email is taken or an error ocurred\r\n    \r\n    priority: high (as of 10/4)\r\n*/\r\nasync function registerAccount(accountInfo) {\r\n    let email_part = accountInfo.email;\r\n    let password_part = accountInfo.password;\r\n    let id_part = accountInfo.id\r\n\r\n    try {\r\n        const response = await axios.post(`http://twitter-ease-api.herokuapp.com/accounts`,{\r\n            email:email_part,\r\n            password:password_part,\r\n            id:id_part\r\n        })\r\n        if(response.status == 200) {\r\n            return true\r\n        }\r\n        throw new Error(\"Request failed!\")\r\n    }\r\n    catch(error) {\r\n        return false\r\n    }\r\n}\r\n\r\n/*\r\n    Frontend sends the backend a tweet to post\r\n    @parameter: \r\n        tweet - Json {tweet_text} \r\n    @returns: \r\n        boolean: true if sucessful tweet, false otherwise\r\n    priority: medium (as of 10/4)\r\n*/\r\n\r\n\r\n// ^ function tweet(message)  <- use this \r\n\r\n/*\r\n    Backend retrieves `num` amount of recent tweets from the account \r\n    @parameters: \r\n        twitterAccount: Json {email, password}\r\n        num: number of tweets to be retrieved - int\r\n    @returns: \r\n        Json {tweet1, tweet2, tweet3...}\r\n    priority: low (as of 10/4)\r\n*/\r\nfunction retrieveTweets(twitterAccount, num) {\r\n    \r\n}\r\n// ^ \r\n\r\nconst login = () => {\r\n    (async () => {\r\n      \r\n      try {\r\n        //OAuth Step 1\r\n        const response = await axios.get('twitter/authorize')\r\n        console.log(response)\r\n        const oauth_token  = response.data.url\r\n        console.log(oauth_token)\r\n        window.location.assign(`${oauth_token}`);\r\n      } catch (error) {\r\n        console.error(error); \r\n      }\r\n      \r\n    })();\r\n  }\r\n\r\n\r\n  // work in progress\r\nasync function tweeting() {\r\n      try {\r\n          const response = await axios({\r\n            url:'twitter/tweet',\r\n            method:'POST'\r\n        }) \r\n\r\n          console.log(response)\r\n          const message = response.data.Message\r\n          console.log(message)\r\n      }\r\n      catch (error) {\r\n          console.error(error)\r\n      }\r\n  }\r\n\r\n  const logout = () => {\r\n    (async () => {\r\n      try {\r\n        await axios({\r\n          url: `/twitter/logout`, \r\n          method: 'GET'\r\n        });\r\n      } catch (error) {\r\n        console.error(error); \r\n      }\r\n    })();\r\n  }\r\n  \r\n\r\nexport default {login,tweeting,logout};","import * as React from 'react';\r\nimport styles from './stylesheets/App.module.css';\r\nimport bg from './images/background.png';\r\nimport interfaceUtil from './interface.js';\r\n\r\nfunction App() {\r\n    const [loggedIn, setLoggedIn] = React.useState(false);\r\n    const [currentPage, setCurrentPage] = React.useState('Home'); //pages: Home, Scheduler, Retweeter, Mass Delete\r\n    const accountInfo = {};\r\n\r\n    return (\r\n        <div className={styles.App}>\r\n            {//if not logged in, show the login prompt\r\n                !loggedIn && <div className = {styles.LoginBox}>\r\n                    <div style = {{marginBottom: '20px', fontSize: '26px', textDecoration: 'underline', textUnderlineOffset: '10px'}}>Twitter Ease</div>\r\n                    <div style = {{marginBottom: '30px'}}>Click below to authorize your Twitter Account</div>\r\n                    <div style = {{marginTop:'20px'}}><span className = {styles.AuthorizeButton} onClick = {() => {interfaceUtil.login()}}>Authorize</span></div>\r\n                </div>\r\n            }   \r\n            {\r\n                loggedIn && <div className = {styles.Page}>\r\n                    <div className = {styles.HeaderBar}><span>{`Welcome User!`}</span></div>\r\n\r\n                </div>\r\n            }\r\n            <img className = {styles.Background} src = {bg}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}